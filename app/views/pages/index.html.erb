<script>
$(document).ready(function(){    

  	var status = "stop";
	var dragging = false;



	// init

	var player = $("#zen .player");

  $(document).ready(function(){

      $('#enableVisuals').click(function() {
          var checkBoxVal = $('#enableVisuals:input').attr('checked');
          if (checkBoxVal === true) {
            enableAnimation();
          } else {
            disableAnimation();
          }
      });

  	var playItem = 0;

  	var myPlayList = [
  <% @songs.each do |song| %>
  {name:"<%= song.name %>",mp3:"<%= song.audio_url.to_s %>"},
  <% end %>
  	];

  	// Local copy of jQuery selectors, for performance.
  	var jpPlayTime = $("#jplayer_play_time");
  	var jpTotalTime = $("#jplayer_total_time");
  	var jpStatus = $("#demo_status"); // For displaying information about jPlayer's status in the demo page

  	$("#jquery_jplayer").jPlayer({
  		ready: function() {
  			displayPlayList();
  			playListInit(false); // Parameter is a boolean for autoplay.
  			demoInstanceInfo(this.element, $("#demo_info")); // This displays information about jPlayer's configuration in the demo page
  		},
  		oggSupport: true
  	})
  	.jPlayer("onProgressChange", function(loadPercent, playedPercentRelative, playedPercentAbsolute, playedTime, totalTime) {
  		jpPlayTime.text($.jPlayer.convertTime(playedTime));
  		jpTotalTime.text($.jPlayer.convertTime(totalTime));

  		demoStatusInfo(this.element, jpStatus); // This displays information about jPlayer's status in the demo page
          draw(loadPercent, playedPercentRelative, playedPercentAbsolute, playedTime, totalTime);
  	})
  	.jPlayer("onSoundComplete", function() {
  		playListNext();
  	});

      $("#jplayer_play").click( function() {
          resumeAnimation();
          $(this).play();
          return false;
      });

      $("#jplayer_pause").click( function() {
          pauseAnimation();
          $(this).pause();
          return false;
      });

      $("#jplayer_stop").click( function() {
          stopAnimation();
          $(this).stop();
          return false;
      });

  	$("#jplayer_previous").click( function() {
  		playListPrev();
  		$(this).blur();
  		return false;
  	});

  	$("#jplayer_next").click( function() {
  		playListNext();
  		$(this).blur();
  		return false;
  	});

  	function displayPlayList() {
  		$("#jplayer_playlist ul").empty();
          $("#jplayer_playlist_downloads ul").empty();
  		for (i=0; i < myPlayList.length; i++) {
  			var listItem = (i == myPlayList.length-1) ? "<li class='jplayer_playlist_item_last'>" : "<li>";
  			listItem += "<a href='#' id='jplayer_playlist_item_"+i+"' tabindex='1'>"+ myPlayList[i].name +"</a>";
  			var downloadItem = (i == myPlayList.length-1) ? "<li class='jplayer_playlist_item_last'>" : "<li>";
              downloadItem += "(<a href='" + myPlayList[i].mp3 + "'>MP3</a>) ";
              downloadItem += "(<a href='" + myPlayList[i].ogg + "'>OGG</a>)";
  			$("#jplayer_playlist ul").append(listItem);
              $("#jplayer_playlist_downloads ul").append(downloadItem);
  			$("#jplayer_playlist_item_"+i).data( "index", i ).click( function() {
  				var index = $(this).data("index");
  				if (playItem != index) {
  					playListChange( index );
  				} else {
  					$("#jquery_jplayer").jPlayer("play");
  				}
  				$(this).blur();
  				return false;
  			});
  		}
  	}

  	function playListInit(autoplay) {
  		if(autoplay) {
  			playListChange( playItem );
  		} else {
  			playListConfig( playItem );
  		}
  	}

  	function playListConfig( index ) {
  		$("#jplayer_playlist_item_"+playItem).removeClass("jplayer_playlist_current").parent().removeClass("jplayer_playlist_current");
  		$("#jplayer_playlist_item_"+index).addClass("jplayer_playlist_current").parent().addClass("jplayer_playlist_current");
  		playItem = index;
  		$("#jquery_jplayer").jPlayer("setFile", myPlayList[playItem].mp3, myPlayList[playItem].ogg);
  	}

  	function playListChange( index ) {
  		playListConfig( index );
  		$("#jquery_jplayer").jPlayer("play");
          resumeAnimation();
  	}

  	function playListNext() {
  		var index = (playItem+1 < myPlayList.length) ? playItem+1 : 0;
  		playListChange( index );
  	}

  	function playListPrev() {
  		var index = (playItem-1 >= 0) ? playItem-1 : myPlayList.length-1;
  		playListChange( index );
  	}

      /* Visualizations */
  //    initAnimation();
  });
  	
  	
</script>

  <div id="zen">
    <span class="player"></span>
    <span class="circle"></span>
    <span class="progress"></span>
    <span class="buffer"></span>
    <span class="drag"></span>
    <div class="button">
      <span class="icon play"></span>
      <span class="icon pause"></span>
    </div>
  </div>


